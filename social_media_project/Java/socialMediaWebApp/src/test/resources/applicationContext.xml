<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<!-- turn on context annotations -->
	<context:annotation-config/>
	
	<!-- package scanning. You can use "example" to scan the "example" package and all subpackages -->
	<context:component-scan base-package="socialMediaWebApp"/>
	
	
	<!-- turn on Spring ORM annotations -->
	<tx:annotation-driven/>
	<!-- turn on Spring MVC annotations -->
	<mvc:annotation-driven/>
	<!-- let's turn on aop -->
	<aop:aspectj-autoproxy/>
	
	
	
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com"/>
        <property name="port" value="25"/>
        <property name="username" value="kyawjohnscul@gmail.com"/>
        <property name="password" value="Hello123!"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean>
	
	
	
	
	<!-- Possible QC Question: What THREE spring beans are necessary to configure Hibernate inside of
		Spring ORM
	-->
	
	
	<!-- DATASOURCE
		DataSource is an object that holds all the attributes necessary to connect to your DB
	-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.postgresql.Driver"/>
		<property name="url"
		value="#{'jdbc:postgresql://'+ systemEnvironment['PROJECT2_DB_ENDPOINT'] + '/project2'}"/>
		<property name="username" value="#{systemEnvironment['PROJECT2_DB_USERNAME']}"/>
		<property name="password" value="p4ssw0rd"/>
	</bean>
	
	<!-- SESSION FACTORY
		Session Factory is an object that is responsible for creating Hibernate Sessions
	 -->
	 
	 <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
	 	<property name="dataSource" ref="dataSource"/>
	 	<!-- <property name="packagesToScan" value="example.model"/> -->
	 	<property name="packagesToScan" value="socialMediaWebApp.models"/>
	 	<property name="hibernateProperties">
	 		<props>
	 			<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL82Dialect</prop>
	 			<prop key="hibernate.show_sql">false</prop>
	 			<prop key="hibernate.format_sql">false</prop>
	 			<prop key="hibernate.hbm2ddl.auto">none</prop>
	 		</props>
	 	</property>
	 </bean>
	
	<!-- TRANSACTION MANAGER
		This bean is responsible for managing your transaction (big surprise)
		ALSO manages our contextual sessions.
		
		What are contextual sessions (hibernate sessions)?
		Sessions with information SPECIFIC to each user. They make it so that each user ONLY
		SEES THEIR INFORMATION, not someone else's.
	 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
</beans>